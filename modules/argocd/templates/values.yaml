global:
  logging:
    format: json
    level: warn

## Argo Configs
configs:
  cm:
    url: "https://${hostname}"
    statusbadge.enabled: "true"
    exec.enabled: "true"
    exec.shells: "bash,sh"
    users.session.duration: "168h"
    
    dex.config: |
      connectors:
      # GitHub example
      - type: github
        id: github
        name: GitHub
        config:
          clientID: ${github_oauth_clientID}
          clientSecret: ${github_oauth_clientSecret}
          orgs:
          - name: stephenpwolfe

    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jsonPointers:
      - /webhooks/0/clientConfig/caBundle
      jqPathExpressions:
      - .webhooks[0].clientConfig.caBundle
      managedFieldsManagers:
      - kube-controller-manager
    
    resource.customizations.ignoreDifferences.all: |
      managedFieldsManagers:
      - kube-controller-manager
      jsonPointers:
      - /spec/replicas
    
    resource.customizations.health.certmanager.k8s.io-Certificate: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for certificate"
      return hs
    
    resource.customizations.health.cert-manager.io_Certificate: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = condition.message
              return hs
            end
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = condition.message
              return hs
            end
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for certificate"
      return hs

  params:
    server.insecure: true

  rbac:
    policy.default: role:readonly
    #scopes: '[email,groups]'
    policy.csv: |
      %{ for group in argocd_admin_groups ~}
      g, stephenpwolfe:${group}, role:admin
      %{ endfor ~}
  
  #credentialTemplates:
  #  https-creds:
  #    url: https://github.com/stephenpwolfe
  #    username: ${github_username}
  #
  #repositories:
  #  stephenpwolfe:
  #    name: "stephenpwolfe"
  #    url: "https://github.com/stephenpwolfe"
  #    passwordSecret:
  #      name: argocd-secret
  #      key: github.token
  #    usernameSecret:
  #      name: argocd-secret
  #      key: github.username

server:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
    hosts:
      - ${hostname}
    tls:
      - secretName: ${hostname}-tls
        hosts:
          - ${hostname}